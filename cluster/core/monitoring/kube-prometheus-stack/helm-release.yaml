---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 16.15.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  dependsOn:
    - name: longhorn
      namespace: longhorn-system
  values:
    alertmanager:
      config:
        global:
          # slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"
          resolve_timeout: 5m
        receivers: []
        # - name: 'null'
        # - name: 'discord'
        #   slack_configs:
        #   - channel: '#prometheus'
        #     icon_url: https://avatars3.githubusercontent.com/u/3380462
        #     username: 'Prometheus'
        #     send_resolved: true
        #     title: |-
        #       [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
        #     text: >-
        #       {{ range .Alerts -}}
        #         *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

        #       {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}

        #       *Details:*
        #         {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
        #         {{ end }}
        #       {{ end }}
        # - name: 'webhook'
        #   webhook_configs:
        #   - url: "http://192.168.1.35:9000/hooks/webhook-ups"
        #     send_resolved: false
        route: {}
        # group_by: ['alertname', 'job']
        # group_wait: 30s
        # group_interval: 5m
        # repeat_interval: 6h
        # receiver: 'discord'
        # routes:
        # - receiver: 'null'
        #   match:
        #     alertname: Watchdog
        # - receiver: 'discord'
        #   match_re:
        #     # severity: critical|warning
        #     severity: critical
        #   continue: true
        # - receiver: 'webhook'
        #   match:
        #     alertname: UPS15MinutesRemaining
        #   continue: true
        inhibit_rules:
          - source_match:
              severity: 'critical'
            target_match:
              severity: 'warning'
            equal: ['alertname', 'namespace']
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - "alert-manager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "alert-manager.${SECRET_DOMAIN}"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 1Gi
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    grafana:
      enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kubeEtcd:
      enabled: false
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
      prometheusSpec:
        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 14d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 50Gi
        # additionalScrapeConfigs:
        # - job_name: 'node-exporter'
        #   honor_timestamps: true
        #   static_configs:
        #   - targets:
        #     # opnsense
        #     - 192.168.1.1:9100
        #     # rocinante nas
        #     - 192.168.42.40:9100
        # - job_name: cadvisor
        #   honor_timestamps: true
        #   metrics_path: /metrics
        #   static_configs:
        #   - targets:
        #     # rocinante nas
        #     - 192.168.42.40:9123
