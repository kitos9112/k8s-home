---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 12.9.0
      sourceRef:
        kind: HelmRepository
        name: prometheus
        namespace: flux-system
      interval: 5m
  timeout: 20m
  test:
    enable: false # Enable helm test
  install:
    remediation: # perform remediation when helm install fails
      retries: 3
  upgrade:
    remediation: # perform remediation when helm upgrade fails
      retries: 3
      remediateLastFailure: true # remediate the last failure, when no retries remain
    cleanupOnFail: true
  rollback:
    timeout: 10m
    recreate: true
    cleanupOnFail: true
  values:
    alertmanager:
      fullnameOverride: alertmanager
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 10Gi
      retention: 120h

    grafana:
      fullnameOverride: grafana
      enabled: true
      deploymentStrategy:
        type: Recreate
      persistence:
        enabled: true
        storageClassName: longhorn
        size: 5Gi
        accessModes:
          - ReadWriteOnce
      env:
        GF_EXPLORE_ENABLED: true
        #GF_DISABLE_SANITIZE_HTML: true
        #GF_PANELS_DISABLE_SANITIZE_HTML: true
        #VAR_BLOCKY_URL: "http://blocky.default.svc.cluster.local:4000"
      plugins:
        - natel-discrete-panel
        - pr0ps-trackmap-panel
        - grafana-piechart-panel
        - vonage-status-panel
        - grafana-worldmap-panel
        - btplc-status-dot-panel
        - cloudflare-app
        - grafana-clock-panel
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: "default"
              orgId: 1
              folder: ""
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/default
      dashboards:
        default:
          flux-cluster:
            url: https://raw.githubusercontent.com/fluxcd/flux2/v0.5.7/manifests/monitoring/grafana/dashboards/cluster.json
            datasource: Prometheus
          flux-control-plane:
            url: https://raw.githubusercontent.com/fluxcd/flux2/v0.5.7/manifests/monitoring/grafana/dashboards/control-plane.json
            datasource: Prometheus
          1-node-exporter:
            url: https://grafana.com/api/dashboards/11074/revisions/9/download
            datasource: Prometheus
          # cable-modem-stats:
          #   url: https://raw.githubusercontent.com/billimek/k8s-gitops/master/monitoring/prometheus-operator/grafana-dashboards/cable_modem_stats.json
          #   datasource: influxdb
          # comcast-sucks:
          #   url: https://raw.githubusercontent.com/billimek/k8s-gitops/master/monitoring/prometheus-operator/grafana-dashboards/comcast_sucks.json
          #   datasource: influxdb
          # home-assistant:
          #   url: https://raw.githubusercontent.com/billimek/k8s-gitops/master/monitoring/prometheus-operator/grafana-dashboards/home_assistant.json
          #   datasource: influxdb
          # ups:
          #   url: https://raw.githubusercontent.com/billimek/k8s-gitops/master/monitoring/prometheus-operator/grafana-dashboards/ups.json
          #   datasource: influxdb
          # netdata:
          #   url: https://raw.githubusercontent.com/billimek/k8s-gitops/master/monitoring/prometheus-operator/grafana-dashboards/netdata.json
          #   datasource: Prometheus

      sidecar:
        datasources:
          enabled: true
          defaultDatasourceEnabled: false
        dashboards:
          enabled: true
          searchNamespace: ALL

      additionalDataSources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://thanos-query-http:10902/
          isDefault: true

      grafana.ini:
        paths:
          data: /var/lib/grafana/data
          logs: /var/log/grafana
          plugins: /var/lib/grafana/plugins
          provisioning: /etc/grafana/provisioning
        analytics:
          check_for_updates: true
        log:
          mode: console
        grafana_net:
          url: https://grafana.net

    prometheusOperator:
      enabled: true
      manageCrds: true
      createCustomResource: true

    nodeExporter:
      fullnameOverride: node-exporter
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    prometheus:
      fullnameOverride: prometheus
      prometheusSpec:
        # image:
        #   repository: quay.io/prometheus/prometheus
        #   tag: v2.20.0
        replicas: 2
        replicaExternalLabelName: "replica"
        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: raspbernetes/thanos:v0.17.2
          version: v0.17.2
          objectStorageConfig:
            name: thanos
            key: object-store.yaml

    kubeStateMetrics:
      enabled: false

    kubeEtcd:
      enabled: false

    kubeControllerManager:
      enabled: true

    kubeScheduler:
      enabled: true

    kubeProxy:
      enabled: true

  valuesFrom:
    - kind: Secret
      name: "kube-prometheus-stack-values"
      optional: false
